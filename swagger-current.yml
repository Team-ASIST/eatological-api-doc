---
openapi: 3.0.0
info:
  title: Backend API
  description: Eatological backend api
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.1.0
servers:
- url: https://eatological-dev.azurewebsites.net
  description: Our beatiful dev server
- url: https://eatological-backend.azurewebsites.net
  description: The main backend, hopefully it will always work
tags:
- name: all
  description: Operations available for everyone
- name: authenticated
  description: Operations available only for authenticated users
paths:
  /status:
    get:
      tags:
      - all
      summary: gets the status of the api
      description: "Returns the current status of the api and database.\nUseful to \"wake up\" the webservice. \n"
      operationId: getStatus
      responses:
        "200":
          description: the status of the backend and the database connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: some error
  /token:
    get:
      tags:
      - all
      summary: Gets a token for a specific user
      description: Returns a session token for the given username
      operationId: getToken
      parameters:
      - name: Username
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The token for the given user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "403":
          description: In case the given user is not found
          content:
            application/json:
              schema:
                properties:
                  errorCode:
                    type: string
                    example: "apiError"
                  errorMessage:
                    type: string
                    example: "Could not create token for user PaulanerGarten"

        
  /user/add:
    post:
      tags:
        - all
      summary: Adds a given user name. To retrieve a token, please use /token.
      description: The given username will be random.
      operationId: userAdd
      responses:
        "200":
          description: The user is saved now and can be used to retrieve tokens.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Added User HippityHoppityYourMomIsNowMyProperty"
  /user/rename:
    put:
      tags:
      - authenticated
      summary: Renames the user found with the used token to the given value
      operationId: renameUser
      parameters:
      - name: Username
        in: header
        required: true
        schema:
          type: string
      security:
      - EatologicalAuth: []
      responses:
        "200":
          description: Rename was successful
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Renamed User to WerAndernEineGrubeGräbtHatEinGrubenGrabGerät"
        "409":
          description: Something went wrong, don't ask me. Probably the given userName was taken.
          content:
            application/json:
              schema:
                properties:
                  errorCode:
                    type: string
                    example: "error"
                  errorMessage:
                    type: string
                    example: "Updating username AAAAAAAAAAAAAH was not possible."
  /user/delete:
    delete:
      tags:
      - authenticated
      summary: Deletes the given user, iff found.
      operationId: deleteUser
      security:
      - EatologicalAuth: []
      responses:
        "200":
          description: Delete was successful
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Removed user."
        "400":
          description: The token is invalid.
          content:
            application/json:
              schema:
                properties:
                  errorCode:
                    type: string
                    example: "error"
                  errorMessage:
                    type: string
                    example: "Could not find token for user unknown"
  /ingredients:
    get:
      tags:
      - all
      summary: Returns all available ingredients from the database
      description: The ingredients in an unorderd list.
      responses:
        "200":
          description: List on ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
  /recipes:
    get:
      tags:
      - authenticated
      summary: Returns all available recipes from the database
      description: The recipes in an unorderd list.
      responses:
        "200":
          description: List on recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
      security:
      - EatologicalAuth: []
  /plan:
    get:
      tags:
      - authenticated
      summary: Returns the current plan
      description: Returns the active (last accepted!) plan.
      responses:
        "200":
          description: The current plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
      security:
      - EatologicalAuth: []
  /plan/cook:
    put:
      tags:
      - authenticated
      summary: Marks a recipe as cooked
      description: The recipe (or meal) is selected by the ID given in the header. Therefore we expect every recipe in a plan to be unique!
      parameters:
      - name: RecipeId
        in: header
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: The new plan the cooked recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        "404":
          description: No active plan found for the user.
          content:
            application/json:
              schema:
                properties:
                  errorCode:
                    type: string
                    example: "apiError"
                  errorMessage:
                    type: string
                    example: "Could not find active plan for ThisUserHasNoPlan"
      security:
      - EatologicalAuth: []
  /plan/create:
    get:
      tags:
      - authenticated
      summary: Starts the creation of a plan
      description: A request to this endpoint initiates the generation of a new meal plan. This creationn my take a while. The request will only terminate after a new plan was generated. Therefore you should request this in the background (async).
      parameters:
      - name: Portions
        in: header
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      - name: Leftovers
        in: header
        required: false
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Item'
      - name: Preferences
        in: header
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Use ingredient IDs here
              items:
                type: integer
      responses:
        "200":
          description: A plan, which mainly contains multiple recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        "400":
          description: In case the header parameters are not formatted correctly
          content:
            application/json:
              schema:
                properties:
                  errorCode:
                    type: string
                    example: "apiError"
                  errorMessage:
                    type: string
                    example: "The header string myMilkshakeBringsAllBaseToTheYard is not a valid json string"
      security:
      - EatologicalAuth: []
  /plan/swipeleft:
    put:
      tags:
      - authenticated
      summary: Swipes the selected ingredient to the left
      description: The swiping indicates, that the backend should generate a new recipe for the given slot
      parameters:
      - name: Slot
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The new plan with the swapped recipe at the given slot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
      security:
      - EatologicalAuth: []
  /plan/swiperight:
    put:
      tags:
      - authenticated
      summary: Swipes the selected ingredient to the right
      description: The swiping indicates, that the backend should use the previous recipe for the given slot
      parameters:
      - name: Slot
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: The new plan with the swapped recipe at the given slot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
      security:
      - EatologicalAuth: []
  /plan/accept:
    post:
      tags:
      - authenticated
      summary: Accepts the current plan
      description: This accepts the current plan, which will close the session for this user. Every setting (like leftovers, ...), previous recipes, etc. are lost. Please use /plan/create to instantiate a new session, otherwise this endpoint returns an error.
      responses:
        "200":
          description: The current plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
      security:
      - EatologicalAuth: []
  /groceries:
    get:
      tags:
      - authenticated
      summary: Returns your current groceries.
      description: Returns the groceries for the currently accepted plan. These groceries are saving the needed and the already bought amount.
      responses:
        "200":
          description: The current groceries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Grocery'
      security:
      - EatologicalAuth: []
  /groceries/buy:
    put:
      tags:
      - authenticated
      summary: Allows to buy one specific ingredient.
      description: The given ingredient will be bought completely, e.g. the amount is the difference of needed - bought.
      parameters:
      - name: IngredientId
        in: header
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: The updated groceries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Grocery'
        "400":
          description: In case the header parameters are not formatted correctly
          content:
            application/json:
              schema:
                properties:
                  errorCode:
                    type: string
                    example: "apiError"
                  errorMessage:
                    type: string
                    example: "The header string ThisIsCertainlyNoJson is not a valid json string"
      security:
      - EatologicalAuth: []
  /restrictions:
    get:
      tags:
      - authenticated
      summary: Get all names of diets that exist in dataset.
      description: Use this endpoint to get the diet names used for /restrictions/set
      responses:
        "200":
          description: All possible diets.
          content:
            application/json:
              schema:
                properties:
                  restrictions:
                    type: array
                    items:
                      type: string
                      example: "Vegetarisch"
      security:
      - EatologicalAuth: []
  /restrictions/set:
    post:
      tags:
      - authenticated
      summary: Choose a diet for the authenticated user.
      description: Use /restrictions to get the available diets.
      parameters:
      - name: Restriction
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: diet successful set
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Set restriction."
        "403":
          description: error during diet set, should only occur when the user can't be found.
          content:
            application/json:
              schema:
                properties:
                  errorCode:
                    type: string
                    example: "error"
                  errorMessage:
                    type: string
                    example: "Could not set restriction vegan for user unknown"
      security:
      - EatologicalAuth: []

  
  
components:
  schemas:
    Status:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          example: running
    Token:
      required:
      - token
      properties:
        token:
          type: string
          example: PaulHierGibtsNixZuSehen
    Ingredient:
      required:
      - alternative
      - amount
      - id
      - local
      - name
      - season
      - smallestAmount
      - unit
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Roastbeef
        smallestAmount:
          type: number
          example: 50
        amount:
          type: number
          example: 1
        unit:
          type: string
          example: g
        season:
          type: boolean
          example: false
        local:
          type: boolean
          example: false
        alternative:
          type: string
          nullable: true
    Recipe:
      required:
      - id
      - imageUrl
      - ingredients
      - name
      - prepTime
      - steps
      - totalTime
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: Pilz-Spaghettini
        prepTime:
          type: integer
          example: 30
        totalTime:
          type: integer
          example: 100
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        steps:
          type: array
          items:
            type: string
            example: Don't burn it. Otherwise you can't eat it
        imageUrl:
          type: string
          example: https://eatological.blob.core.windows.net/recipe-images/recipe3.jpg
    Item:
      description: Maps a given ingredient id to a quantity
      required:
      - id
      - quantity
      type: object
      properties:
        id:
          type: integer
          example: 1
        quantity:
          type: number
          example: 42.73
    Plan:
      required:
      - meals
      - sustainabilityScore
      properties:
        meals:
          type: array
          items:
            $ref: '#/components/schemas/Meal'
        sustainabilityScore:
          type: number
          example: 0.4
    Meal:
      required:
      - cooked
      - portion
      - recipe
      properties:
        recipe:
          $ref: '#/components/schemas/Recipe'
        portion:
          type: integer
          example: 4
        cooked:
          type: boolean
          example: false
    Grocery:
      required:
        - ingredientId
        - required
        - bought
      properties:
        ingredientId:
          type: integer
          example: 4
        required:
          type: number
          example: 2
        bought:
          type: number
          example: 1.5


  securitySchemes:
    EatologicalAuth:
      type: apiKey
      name: EatologicalToken
      in: header
